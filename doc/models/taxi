Help on module taxi:

NAME
    taxi

CLASSES
    flask_sqlalchemy.Model(flask_sqlalchemy.Model)
        Taxi
    
    class Taxi(flask_sqlalchemy.Model)
     |  Taxi(position)
     |  
     |  A Class representing a Taxi
     |  We are using SQLAlchemy BaseDescriptor to store this in SQLite as well
     |  
     |  Method resolution order:
     |      Taxi
     |      flask_sqlalchemy.Model
     |      flask_sqlalchemy.Model
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, position)
     |      Initiates the Taxi's position and ID
     |      
     |      Arguments:
     |          position {integer tuple[x,y]} -- an integer tuple repesenting a coordinate
     |          id {integer} -- Taxi's id
     |  
     |  book(self, pickup, destination)
     |      Book the taxi
     |      
     |      Use the pathfinding algorithm to find path to pickup point then to the destination
     |      
     |      This function will also populate the coordinate_q with the coordinates to be traversed
     |      
     |      Arguments:
     |          pickup {integer tuple[x,y]} -- Pickup the passenger here
     |          destination {integer tuple[x,y]} -- Bring the passenger here
     |      
     |      Returns:
     |          t_units {integer} = number of time units
     |  
     |  get_taxi_data(self)
     |      Returns relevant taxi data so we can store it in DB or memcacche or just view stats
     |  
     |  move_time(self)
     |      Advances the Time Unit while also updating position and popping off coordinates from queues
     |      
     |      Also changes the Taxi state from PICKING_UP to DROPPING_OFF to AVAILABLE
     |  
     |  set_available(self)
     |      Makes this taxi available
     |  
     |  set_booked(self)
     |      Books this taxi
     |  
     |  set_pathfinder(self, pathfinder)
     |      Set's the taxi's path finding algorithm
     |      
     |      Arguments:
     |          pathfinder {Pathfinder} -- pathfinding class that contains the algorithm
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  coordinate_q
     |  
     |  destination
     |  
     |  id
     |  
     |  pickup
     |  
     |  position
     |  
     |  state
     |  
     |  time_to_finish
     |  
     |  time_unit
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __mapper__ = <Mapper at 0x7f4d91741460; Taxi>
     |  
     |  __table__ = Table('taxis', MetaData(bind=None), Column('id',..._finish...
     |  
     |  __tablename__ = 'taxis'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from flask_sqlalchemy.Model:
     |  
     |  query
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from flask_sqlalchemy.Model:
     |  
     |  metadata = MetaData(bind=None)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from flask_sqlalchemy.Model:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from flask_sqlalchemy.Model:
     |  
     |  query_class = <class 'flask_sqlalchemy.BaseQuery'>
     |      The default query object used for models, and exposed as
     |      :attr:`~SQLAlchemy.Query`. This can be subclassed and
     |      replaced for individual models by setting the :attr:`~Model.query_class`
     |      attribute.  This is a subclass of a standard SQLAlchemy
     |      :class:`~sqlalchemy.orm.query.Query` class and has all the methods of a
     |      standard query as well.

DATA
    AVAILABLE = 0
    DROPPING_OFF = 2
    PICKING_UP = 1
    db = <SQLAlchemy engine=None>

FILE
   /simple-taxi-tracking/project/models/taxi.py


